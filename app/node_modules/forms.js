/*

 Forms dict format:

 block = chunk,chunk
 chunk = form,lemma1,lemma2,...\n

*/

var d = require("dictbase");

// Reading

var _dict = null;

function parseBlock(b) {
    var r = [];
    b.split("\n").forEach(function(s) {
        s = s.split(",");
        r.push({key: s[0], val: s.slice(1)});
    });
    return r;
}

function similars(form, limit) {

    var mk = d.mkey(form);
    var b = _dict.findBlock(mk.substr(0, 2));

    if(!b)
        return [];

    var r = {};
    var m = [[], [], [], []];

    _dict.readBlock(b).forEach(function(x) {
        var f = x.key, k = d.mkey(x.key);

        if(k.indexOf(mk) !== 0)
            return;
        if(r[f])
            return;
        r[f] = 1;
        if(f == form)
            m[0].push(f);
        else if(k == mk)
            m[1].push(f);
        else if(f.indexOf(form) == 0)
            m[2].push(f);
        else if(m[3].length < limit)
            m[3].push(f);
    });

    m = m[0].concat(m[1], m[2], m[3]);
    return m.slice(0, limit);
}


function lemmas(form) {
    var mk = d.mkey(form);
    var b = _dict.findBlock(mk.substr(0, 2));

    if(!b)
        return [];

    var ls = [];

    _dict.readBlock(b).forEach(function(x) {
        if(x.key == form)
            ls = ls.concat(x.val);
    });

    if(ls.length)
        return d.uniq(ls);

    _dict.readBlock(b).forEach(function(x) {
        if(d.mkey(x.key) == mk)
            ls = ls.concat(x.val);
    });

    return d.uniq(ls);
}

function openRead(dir) {
    _dict = new d.Dict("forms", dir).openRead();
    _dict.parseBlock = parseBlock;
    return module.exports;
}

// Writing

var _wdict = null;
var _digram = null;

function openWrite(dir) {
    _wdict = new d.Dict("forms", dir, 0xFFFFF).openWrite();
    return module.exports;
}

function write(form, lemmas) {
    var di = d.mkey(form).substr(0, 2);
    if(_digram && di != _digram)
        _wdict.flush();
    _digram = di;
    _wdict.addString(_digram, form + "," + lemmas.join(","));
}

function closeWrite() {
    _wdict.closeWrite();
}

module.exports = {
    openRead: openRead,
    similars: similars,
    lemmas: lemmas,
    openWrite: openWrite,
    write: write,
    closeWrite: closeWrite,
};
